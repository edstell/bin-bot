// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: recyclingservices.proto

package recyclingservicesproto

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Service) Validate() error {
	if this.LastService != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.LastService); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("LastService", err)
		}
	}
	if this.NextService != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.NextService); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("NextService", err)
		}
	}
	return nil
}
func (this *Property) Validate() error {
	for _, item := range this.Services {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Services", err)
			}
		}
	}
	if this.UpdatedAt != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UpdatedAt); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UpdatedAt", err)
		}
	}
	return nil
}
func (this *Notifier) Validate() error {
	if this.GetNotifier() == nil {
		return github_com_mwitkow_go_proto_validators.FieldError("Notifier", fmt.Errorf("one of the fields must be set"))
	}
	if oneOfNester, ok := this.GetNotifier().(*Notifier_Sms); ok {
		if oneOfNester.Sms != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(oneOfNester.Sms); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Sms", err)
			}
		}
	}
	return nil
}
func (this *Notifier_SMS) Validate() error {
	if this.PhoneNumber == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PhoneNumber", fmt.Errorf(`value '%v' must not be an empty string`, this.PhoneNumber))
	}
	return nil
}
func (this *ReadPropertyRequest) Validate() error {
	if this.PropertyId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PropertyId", fmt.Errorf(`value '%v' must not be an empty string`, this.PropertyId))
	}
	return nil
}
func (this *ReadPropertyResponse) Validate() error {
	if this.Property != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Property); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Property", err)
		}
	}
	return nil
}
func (this *SyncPropertyRequest) Validate() error {
	if this.PropertyId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PropertyId", fmt.Errorf(`value '%v' must not be an empty string`, this.PropertyId))
	}
	return nil
}
func (this *SyncPropertyResponse) Validate() error {
	if this.Property != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Property); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Property", err)
		}
	}
	return nil
}
func (this *NotifyPropertyRequest) Validate() error {
	if this.PropertyId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PropertyId", fmt.Errorf(`value '%v' must not be an empty string`, this.PropertyId))
	}
	if this.MessageName == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("MessageName", fmt.Errorf(`value '%v' must not be an empty string`, this.MessageName))
	}
	if nil == this.Notifier {
		return github_com_mwitkow_go_proto_validators.FieldError("Notifier", fmt.Errorf("message must exist"))
	}
	if this.Notifier != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Notifier); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Notifier", err)
		}
	}
	return nil
}
func (this *NotifyPropertyResponse) Validate() error {
	return nil
}
