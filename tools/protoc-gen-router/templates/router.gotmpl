// DO NOT EDIT: Router was autogenerated from '{{.Name}}'
package {{.Package}}

import (
	"context"
	"encoding/json"

	"github.com/edstell/lambda/libraries/rpc"
)
{{range .Service}}
type Handler interface {{{range .Method}}
	{{.Name}}(context.Context, {{.InputType}}) (*{{.OutputType}}, error){{end}}
}

type Router struct {
	*rpc.Router
}

func NewRouter(handler Handler) *Router {
	router := rpc.NewRouter(){{range .Method}}
	router.Route("{{.Name}}", {{.Name}}(handler.{{.Name}})){{end}}
	return &Router{
		Router: router,
	}
}
{{range .Method}}
func {{.Name}}(handler func(context.Context, {{.InputType}}) (*{{.OutputType}}, error)) rpc.Handler {
	return func(ctx context.Context, req rpc.Request) (*rpc.Response, error) {
		body := &{{.InputType}}{}
		if err := json.Unmarshal(req.Body, body); err != nil {
			return nil, err
		}

		rsp, err := handler(ctx, *body)
		if err != nil {
			return nil, err
		}

		bytes, err := json.Marshal(rsp)
		if err != nil {
			return nil, err
		}

		return &rpc.Response{
			Body: bytes,
		}, nil
	}
}{{end}}{{end}}
