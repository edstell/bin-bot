// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xc1\x6e\x9b\x4e\x10\xc6\xcf\xec\x53\xcc\x9f\x43\x02\x11\x7f\xb8\xbb\xca\x29\xe9\xc1\x52\x62\x57\xaa\xfb\x00\xeb\x65\x8c\xb7\x81\x5d\x32\x0c\x71\xac\x0d\xef\x5e\x2d\x0b\x6e\x52\x5b\x6a\xd4\x93\x57\xe3\x99\x6f\x7e\xdf\x7c\x14\x05\xdc\xaf\x61\xb5\xde\xc0\xd7\xfb\xe5\x66\x01\x77\xb5\x46\xc3\x70\x90\x1d\xc8\x9e\x6d\x85\x06\x49\x32\x96\xb0\x23\xdb\xc0\xb5\x73\xf9\x4a\x36\x38\x0c\xd7\xa2\x95\xea\x49\x56\x08\xce\xe5\xdf\xc2\x73\x18\x84\xd0\x4d\x6b\x89\x21\x11\x51\xac\xac\x61\x7c\xe5\x58\x88\x28\xae\x34\xef\xfb\x6d\xae\x6c\x53\x60\xd9\x31\xd6\x75\x51\xcb\x66\x5b\xca\xa2\xd6\x5b\x92\xa4\xb1\x2b\xa8\x55\xb1\x6f\xb5\xb6\xaa\x31\xaf\x6c\x2d\x4d\x95\x5b\xaa\x8a\x96\x2c\xdb\x6d\xbf\x2b\xd0\x28\x5b\x6a\x33\x55\x7e\x76\xd6\xc4\x22\x15\xce\xfd\x0f\x24\x4d\x85\x90\x7f\x47\x7a\xd1\x6a\x04\xe1\x63\x8b\xb3\x1b\x6d\x18\x69\x27\x15\x82\x13\xd1\xbb\xf6\x47\xe4\xbd\x2d\x87\xc1\x17\x27\x5f\xc9\x44\x9d\xdf\x85\xdf\x0c\x6e\x9c\xcb\x97\xa6\xed\x79\x73\x6c\xf1\x8d\xf6\xdd\x30\xa4\x90\xf8\xea\xba\xe7\x0f\xe5\x0c\x90\xc8\x52\x1a\x76\xa0\xf1\xca\x33\x89\x0a\x24\x1d\x53\xaf\xf8\x6f\x18\x6f\x6c\x1f\xec\x01\x69\x18\x00\x80\x5a\x95\x2f\xcd\x8b\x7d\x42\xfa\x43\x78\xd7\x1b\x05\x2b\x3c\x04\x97\x89\x1e\x5b\x1f\xc6\xb3\x4e\x03\x19\x48\x32\x7e\xa9\x36\x55\x3a\x5f\xc3\x89\x88\x90\x7b\x32\x70\x15\xa8\x9c\x88\x2e\xe3\x9c\xf3\x2c\x26\xa0\x79\xe5\xb8\x20\x83\xf8\x74\xbf\x38\xcd\x26\xb5\x80\x19\x79\xd2\x4b\xe2\x81\x3e\x51\x70\x13\x20\x52\x78\x97\x01\xbf\xc2\x59\x0e\x84\xcf\xff\x90\x85\x77\xdb\xca\x63\x6d\x65\x39\x96\x60\x71\x0b\xa7\xaf\x27\x7f\x94\xd4\xed\x65\x9d\x10\x3e\xa7\x22\xd2\xbb\xb1\xe3\xbf\x5b\x30\xba\xf6\x83\xf3\x9d\x8c\xae\xc7\x61\xef\x26\xa2\xae\x3d\x29\xa9\xfc\xec\x42\x53\x56\xde\x43\x06\xd3\xe6\x4f\x6b\xdb\x9e\xbd\xec\xd5\x05\x43\x6e\x38\x89\x7c\xb0\xf0\xc3\x34\xb3\x09\x0f\x66\x7b\x4e\xbf\x7c\xca\x46\xa8\xd9\x9e\x33\xff\xc7\x94\x52\x08\xed\xf7\xeb\x57\x00\x00\x00\xff\xff\x72\x91\x18\xad\x1f\x04\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 1055, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x4e\xdc\x30\x10\x3e\xc7\x4f\x31\xcd\x01\x12\x94\x3a\xf7\x45\x1c\xda\x82\x54\xa4\x02\x15\xa5\xbd\x3b\xc9\x6c\x36\x25\xb1\xc3\xd8\x59\x58\x19\xbf\x7b\xe5\x38\xd9\x94\x6e\x69\x55\xa9\x07\x84\x77\xf2\xf9\xfb\x99\x19\xe7\x39\x9c\xdf\xc0\xf5\xcd\x1d\x5c\x9c\x5f\xde\xad\xe0\x56\x0d\x06\x09\x1e\x85\x06\x31\x18\x55\xa3\x44\x12\x06\x2b\x58\x93\xea\xe0\xd8\x5a\x7e\x2d\x3a\x74\xee\x98\xf5\xa2\xbc\x17\x35\x82\xb5\xfc\x73\x38\x3a\xc7\x58\xd3\xf5\x8a\x0c\x24\x2c\x8a\x4b\x25\x0d\x3e\x99\x98\xb1\x28\xae\x1b\xb3\x19\x0a\x5e\xaa\x2e\xc7\x4a\x1b\x6c\xdb\xbc\x15\x5d\x51\x89\xbc\x6d\x0a\x12\xd4\xa0\xce\xa9\x2f\x63\x0f\x55\xaa\x6e\x91\xd7\xaa\x15\xb2\xe6\x8a\xea\xbc\xa6\xbe\xcc\x4b\x55\xa1\xfe\xc3\x77\x6d\x84\x19\x5e\x01\xf4\xa4\x8c\x2a\x86\x75\x8e\xb2\x54\x55\x23\xa7\xca\x77\xad\x64\xcc\x52\x66\x2d\x09\x59\x23\xf0\x2f\x48\xdb\xa6\xf4\x39\xcc\xae\x47\xd8\x8a\xb6\xa9\x84\x51\x04\x8d\x34\x48\x6b\x51\x22\x58\x16\x7d\x0b\x65\x4c\x52\x40\x22\x45\xcc\xb1\x80\xff\x28\x64\xd5\xe2\x2f\x68\x6b\xdf\xc2\x44\x7f\x85\x66\xa3\x2a\xe7\x7c\x71\x6a\x63\x32\x35\x89\x7f\x08\xff\x33\x38\xb1\x96\x5f\xca\x7e\x30\x77\xbb\x1e\x9f\x69\xa3\x9d\x4b\x21\xf1\xd5\x9b\xc1\xbc\x28\x67\x41\x3e\x0d\x1a\x28\x3d\xf3\x6c\x65\x1a\xa3\x36\x34\x94\xc6\xdb\x38\xa1\xbe\xe4\xa1\xea\x41\xeb\x41\x96\x70\x8d\x8f\xa1\x92\x6c\x26\xe7\x53\x82\x14\x4e\x26\x02\xcb\x22\x0a\xa7\xd5\x19\x78\x8a\xe5\x4e\xfa\x4a\xb6\x80\x0f\x5a\x49\xbc\x4f\x1a\x67\x30\x9d\x9f\x8d\xfa\xa4\x1e\x91\x9c\x9b\x75\xf9\x1e\x95\xbe\x48\x13\x11\x9a\x81\x24\x1c\x05\x49\xcb\xa2\x28\x9c\x56\x10\x54\x32\x16\xf9\xcc\xbf\xf3\x11\x22\xbe\x2a\x09\xfe\xf3\xff\xe8\x7e\x3a\xb6\x65\x1e\xbd\xdd\x7b\x0e\xfc\xe6\x09\x0e\x34\x08\x1f\xc6\x3b\xb7\xf8\x30\xa0\x36\x9e\x3f\xfc\xd4\xbd\x92\x1a\x67\x62\xcf\x15\x15\xaa\xda\xf9\xd6\x1f\x1d\xfa\xb2\x8e\x45\x51\xb3\xf6\x68\x8f\xd8\x6f\x34\xff\x2a\x3b\x41\x7a\x23\xda\x84\xf0\x81\xbf\x57\xd5\x2e\x03\xcf\x93\x9e\x8e\xd8\x37\x67\x20\x9b\x76\x64\x9f\xbd\xca\xa6\x1d\x55\x59\x14\x79\xd2\xad\x20\x28\x96\x2d\xb6\x0e\xce\x46\x82\xa0\xb7\xcd\x40\xdd\x7b\xc5\x82\x27\xfb\x17\x92\x9e\xfa\xe2\xc8\xb9\x58\xda\xf2\xe5\xa9\x1c\x6a\xbf\x10\x0f\xaf\x97\x5f\xf8\xe4\xc9\xf8\xd4\xf9\xa5\x1c\xd9\xdf\x51\x3d\x74\x28\xcd\x68\x70\x02\xf8\x2d\x09\x56\xfd\x1f\xe9\x3e\x9b\x25\xa7\xe9\xfa\xc6\x4f\xa1\x97\x26\xfd\x3d\x78\xb1\x33\xa8\xb3\xc3\x8e\x5e\xcd\xfd\xd4\xfd\x3f\xf1\xcd\xeb\xfb\xf3\x78\x47\xb8\x1f\xca\x0a\x82\x9c\xc7\x66\xfe\xe6\xb2\xcb\x61\xfb\x97\xd3\x8f\x00\x00\x00\xff\xff\xc0\x5d\x76\x07\xa5\x05\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1445, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
