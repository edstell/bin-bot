// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x6e\xdb\x30\x10\x3c\x8b\xaf\xd8\xea\x90\x48\x81\x2a\xdd\x5d\xe4\x94\xf4\x60\x20\xb1\x0b\xd4\x7d\x00\x4d\xad\x65\x36\x12\x57\x59\x91\x71\x0c\x86\x7f\x2f\x28\xc9\x6e\x82\xf8\x90\x93\x88\xd1\xec\xec\xcc\x4e\x55\xc1\xfd\x1a\x56\xeb\x0d\xfc\xbc\x5f\x6e\x16\x70\xd7\x6a\x34\x16\x0e\x72\x00\xe9\x2c\x35\x68\x90\xa5\xc5\x1a\x76\x4c\x1d\x5c\x7b\x5f\xae\x64\x87\x21\x5c\x8b\x5e\xaa\x27\xd9\x20\x78\x5f\xfe\x9a\x9e\x21\x08\xa1\xbb\x9e\xd8\x42\x26\x92\x54\x91\xb1\xf8\x6a\x53\x21\x92\xb4\xd1\x76\xef\xb6\xa5\xa2\xae\xc2\x7a\xb0\xd8\xb6\x55\x2b\xbb\x6d\x2d\xab\x56\x6f\x59\xb2\xc6\xa1\xe2\x5e\xa5\x91\x4a\xd4\xb4\x58\x36\xd4\x4a\xd3\x94\xc4\x4d\xd5\x33\x59\xda\xba\x5d\x85\x46\x51\xad\xcd\x8c\xfc\x1d\xc8\xa4\x22\x17\xde\x7f\x07\x96\xa6\x41\x28\x7f\x23\xbf\x68\x35\x1a\xb1\xc7\x1e\x4f\x69\x06\xcb\x4e\x59\xf0\x22\x79\xc7\x7d\x44\xbb\xa7\x3a\x84\x08\x8e\xa1\xde\x2c\x3d\xd0\x01\x39\x04\x00\xe0\x5e\x95\x4b\xf3\x42\x4f\xc8\xd3\x14\x9a\xc8\x0d\x42\xec\x9c\x51\xb0\xc2\xc3\xa4\x9d\xe9\x91\xfa\x30\x86\x99\x07\x0a\x90\x6c\xe2\x52\x6d\x9a\x1c\x6e\x66\x13\x5e\x24\x8c\xd6\xb1\x81\xab\x09\xf1\x22\xb9\xec\xe7\xb3\xa1\xc5\xec\xe8\xb4\x73\xdc\x50\x40\x7a\xae\x23\xcd\x8b\x59\x6d\xf2\x99\x44\xab\x97\xc4\x27\xfb\x99\x3a\xd9\xca\xe1\xac\x91\x29\xfb\x0a\x73\x69\xe5\xdd\xf4\x2d\x80\xf1\x19\x6e\xbc\x2f\x97\xa6\x77\x76\x73\xec\xf1\x8d\xf7\x43\x08\x39\x64\x11\x5d\x3b\xfb\x01\x2e\x00\x99\x89\xf3\x98\xb6\x97\xc7\x96\x64\x3d\x42\xb0\xb8\x85\x73\x69\xe5\xa3\xe4\x61\x2f\xdb\x8c\xf1\x39\x17\x89\xde\x8d\x8c\x6f\xb7\x60\x74\x1b\x07\x4f\x77\x32\xba\x1d\x87\x63\x1a\x91\xf0\xd0\x9f\xa5\x54\xf9\xe9\x44\x73\x5b\x31\x44\x01\xf3\xea\xaf\x8b\x93\xb3\x51\xf7\xea\x42\x24\x1f\xce\x2a\x1f\x42\xfc\x31\xdd\x29\x46\x74\x46\xce\xe6\x3f\xbe\x16\x64\x02\xc9\xd9\x22\xfe\x99\x8b\x9a\x7a\xfb\xff\xfa\x17\x00\x00\xff\xff\xa6\x2b\x26\x30\x99\x03\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 921, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x6e\x9c\x30\x10\x3e\xdb\x4f\x31\xe5\x90\x40\x44\xcd\x7d\xab\x5c\xda\x54\x6a\xa4\x26\xa9\xd2\xed\x03\x18\x98\x65\x69\xc1\x66\xc7\xa6\x9b\x95\xe3\x77\xaf\x8c\x61\xb7\xd1\x36\x52\x2b\xf5\xc4\x30\x7c\xf3\xfd\x0c\x53\x14\x70\xf3\x00\xf7\x0f\x6b\xf8\x78\x73\xbb\x5e\xc1\xa3\x1e\x2d\x12\xec\xa5\x01\x39\x5a\xdd\xa0\x42\x92\x16\x6b\xd8\x90\xee\xe1\xd2\x39\x71\x2f\x7b\xf4\xfe\x92\x0f\xb2\xfa\x21\x1b\x04\xe7\xc4\x97\x58\x7a\xcf\x79\xdb\x0f\x9a\x2c\xa4\x9c\x25\x95\x56\x16\x9f\x6c\xc2\x39\x4b\x9a\xd6\x6e\xc7\x52\x54\xba\x2f\xb0\x36\x16\xbb\xae\xe8\x64\x5f\xd6\xb2\xe8\xda\x92\x24\xb5\x68\x0a\x1a\xaa\x24\x40\xb5\x6e\x3a\x14\x8d\xee\xa4\x6a\x84\xa6\xa6\x18\x48\x5b\x5d\x8e\x9b\x02\x55\xa5\xeb\x56\xcd\x9d\xef\x46\xab\x84\x67\xdc\x39\x92\xaa\x41\x10\x5f\x91\x7e\xb6\x55\xb0\x61\x0f\x03\xc2\x27\xa9\xea\x0e\x09\x5a\x65\x91\x36\xb2\x42\x70\x9c\x39\xf7\x16\x66\xf8\x1d\xda\xad\xae\xbd\x0f\xcd\x39\x55\x3a\x7b\x16\x1f\xe2\x33\x87\x2b\xe7\xc4\xad\x1a\x46\xbb\x3e\x0c\xf8\x4c\x5b\xe3\x7d\x06\x69\xe8\x3e\x8c\xf6\x45\x3b\x07\x24\xd2\x94\x45\x0d\x54\x81\xd9\xf3\x68\x65\xde\xaa\xb1\x34\x56\x36\xd8\xb8\xa2\xa1\x12\xb1\x1b\x40\x9b\x51\x55\x70\x8f\xfb\xd8\x49\xb7\xb3\xf3\x39\x41\x06\x57\x33\x81\xe3\x8c\x62\xb5\xba\x86\x40\x71\x9a\xc9\x5e\xc9\x16\xf1\x51\x2b\x4d\x8e\x49\x93\x1c\xe6\xfa\xd9\xea\xcf\x7a\x8f\xe4\xfd\xa2\x2b\x8e\xa8\xec\x45\x1a\x46\x68\x47\x52\x70\x11\x25\x1d\x67\x2c\x56\x2b\x88\x2a\x39\x67\x21\xf3\x9f\x7c\xc4\x88\xaf\x4a\x42\xf8\xfc\x3f\xb6\x9f\x4d\x6b\x59\x7e\xbd\x3b\x7a\x8e\xfc\xf6\x09\xce\x34\x08\x77\xd3\xcc\x23\xee\x46\x34\x36\xf0\xc7\x57\x33\x68\x65\x70\x21\x0e\x5c\xac\xd4\xf5\x21\xac\xfe\xe2\xdc\x97\xf3\x9c\xb1\x76\x13\xd0\x01\x71\xbc\x50\xf1\x4d\xf5\x92\xcc\x56\x76\x29\xe1\x4e\xbc\xd7\xf5\x21\x87\xc0\x93\xbd\x9b\xb0\x6f\xae\x41\xb5\xdd\xc4\xbe\x78\x55\x6d\x37\xa9\x72\xc6\x3c\xe7\x8c\x91\x19\xf2\x85\x77\xde\x57\x88\x32\xd3\x9c\x64\xff\x82\xaa\x3c\x58\x34\xf9\xb9\xc9\xbb\xc5\xa2\x19\xfe\x8d\x70\x39\x89\xdf\x57\x36\xe1\x43\xd0\x15\x44\xbd\x00\xce\xc3\xe8\xe9\x3e\xe2\x45\x9d\xaa\x5f\x01\x00\x00\xff\xff\x5b\x90\x82\x6c\x88\x04\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1160, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
