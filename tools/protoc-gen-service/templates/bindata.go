// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x6e\xdb\x30\x10\x3c\x8b\xaf\xd8\xea\x90\x48\x81\x2a\xdd\x5d\xe4\x94\xf4\x60\x20\xb1\x0b\xd4\x7d\x00\x4d\xad\x65\x36\x12\x57\x59\x91\x71\x0c\x86\x7f\x2f\x28\xc9\x6e\x82\xf8\x90\x93\x88\xd1\xec\xec\xcc\x4e\x55\xc1\xfd\x1a\x56\xeb\x0d\xfc\xbc\x5f\x6e\x16\x70\xd7\x6a\x34\x16\x0e\x72\x00\xe9\x2c\x35\x68\x90\xa5\xc5\x1a\x76\x4c\x1d\x5c\x7b\x5f\xae\x64\x87\x21\x5c\x8b\x5e\xaa\x27\xd9\x20\x78\x5f\xfe\x9a\x9e\x21\x08\xa1\xbb\x9e\xd8\x42\x26\x92\x54\x91\xb1\xf8\x6a\x53\x21\x92\xb4\xd1\x76\xef\xb6\xa5\xa2\xae\xc2\x7a\xb0\xd8\xb6\x55\x2b\xbb\x6d\x2d\xab\x56\x6f\x59\xb2\xc6\xa1\xe2\x5e\xa5\x91\x4a\xd4\xb4\x58\x36\xd4\x4a\xd3\x94\xc4\x4d\xd5\x33\x59\xda\xba\x5d\x85\x46\x51\xad\xcd\x8c\xfc\x1d\xc8\xa4\x22\x17\xde\x7f\x07\x96\xa6\x41\x28\x7f\x23\xbf\x68\x35\x1a\xb1\xc7\x1e\x4f\x69\x06\xcb\x4e\x59\xf0\x22\x79\xc7\x7d\x44\xbb\xa7\x3a\x84\x08\x8e\xa1\xde\x2c\x3d\xd0\x01\x39\x04\x00\xe0\x5e\x95\x4b\xf3\x42\x4f\xc8\xd3\x14\x9a\xc8\x0d\x42\xec\x9c\x51\xb0\xc2\xc3\xa4\x9d\xe9\x91\xfa\x30\x86\x99\x07\x0a\x90\x6c\xe2\x52\x6d\x9a\x1c\x6e\x66\x13\x5e\x24\x8c\xd6\xb1\x81\xab\x09\xf1\x22\xb9\xec\xe7\xb3\xa1\xc5\xec\xe8\xb4\x73\xdc\x50\x40\x7a\xae\x23\xcd\x8b\x59\x6d\xf2\x99\x44\xab\x97\xc4\x27\xfb\x99\x3a\xd9\xca\xe1\xac\x91\x29\xfb\x0a\x73\x69\xe5\xdd\xf4\x2d\x80\xf1\x19\x6e\xbc\x2f\x97\xa6\x77\x76\x73\xec\xf1\x8d\xf7\x43\x08\x39\x64\x11\x5d\x3b\xfb\x01\x2e\x00\x99\x89\xf3\x98\xb6\x97\xc7\x96\x64\x3d\x42\xb0\xb8\x85\x73\x69\xe5\xa3\xe4\x61\x2f\xdb\x8c\xf1\x39\x17\x89\xde\x8d\x8c\x6f\xb7\x60\x74\x1b\x07\x4f\x77\x32\xba\x1d\x87\x63\x1a\x91\xf0\xd0\x9f\xa5\x54\xf9\xe9\x44\x73\x5b\x31\x44\x01\xf3\xea\xaf\x8b\x93\xb3\x51\xf7\xea\x42\x24\x1f\xce\x2a\x1f\x42\xfc\x31\xdd\x29\x46\x74\x46\xce\xe6\x3f\xbe\x16\x64\x02\xc9\xd9\x22\xfe\x99\x8b\x9a\x7a\xfb\xff\xfa\x17\x00\x00\xff\xff\xa6\x2b\x26\x30\x99\x03\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 921, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5f\x6f\xd3\x30\x10\x7f\xb6\x3f\xc5\xd1\x87\x2d\x99\x82\xf3\xde\x69\x0f\xc0\x26\x31\x89\x6d\x68\x0c\xde\x9d\xe4\x9a\x86\xa5\x76\x76\x76\xba\x55\x9e\xbf\x3b\x72\x9c\x34\x8c\x32\x04\x12\x4f\x75\x2f\x3f\xff\xfe\x9c\xef\xf2\x1c\xce\x6f\xe0\xfa\xe6\x0e\x2e\xce\x2f\xef\x96\x70\xab\x7b\x8b\x04\x8f\xd2\x80\xec\xad\xae\x51\x21\x49\x8b\x15\xac\x48\x6f\xe0\xd8\x39\x71\x2d\x37\xe8\xfd\x31\xef\x64\x79\x2f\x6b\x04\xe7\xc4\xe7\x78\xf4\x9e\xf3\x66\xd3\x69\xb2\x90\x70\xb6\x28\xb5\xb2\xf8\x64\x17\x9c\xb3\x45\xdd\xd8\x75\x5f\x88\x52\x6f\x72\xac\x8c\xc5\xb6\xcd\x5b\xb9\x29\x2a\x99\xb7\x4d\x41\x92\x1a\x34\x39\x75\xe5\x22\x40\xb5\xae\x5b\x14\xb5\x6e\xa5\xaa\x85\xa6\x3a\xaf\xa9\x2b\xf3\x52\x57\x68\xfe\xf0\xdd\x58\x69\xfb\x57\x00\x1d\x69\xab\x8b\x7e\x95\xa3\x2a\x75\xd5\xa8\xb1\xf2\xdd\x68\xb5\xe0\x29\x77\x8e\xa4\xaa\x11\xc4\x17\xa4\x6d\x53\x86\x1c\x76\xd7\x21\x6c\x65\xdb\x54\xd2\x6a\x82\x46\x59\xa4\x95\x2c\x11\x1c\x67\xdf\x62\x19\x93\x14\x90\x48\x13\xf7\x3c\xe2\x3f\x4a\x55\xb5\xf8\x0b\xda\xb9\xb7\x30\xd2\x5f\xa1\x5d\xeb\xca\xfb\x50\x1c\xdb\x98\x8c\x4d\x12\x1f\xe2\x6f\x06\x27\xce\x89\x4b\xd5\xf5\xf6\x6e\xd7\xe1\x33\xad\x8d\xf7\x29\x24\xa1\x7a\xd3\xdb\x17\xe5\x2c\xca\xa7\x51\x03\x55\x60\x9e\xac\x8c\xcf\x68\x2c\xf5\xa5\x0d\x36\x4e\xa8\x2b\x45\xac\x06\xd0\xaa\x57\x25\x5c\xe3\x63\xac\x24\xeb\xd1\xf9\x98\x20\x85\x93\x91\xc0\x71\x46\xf1\xb4\x3c\x83\x40\x31\xdf\x49\x5f\xc9\x16\xf1\x51\x2b\x59\xec\x93\x2e\x32\x18\xcf\xcf\x56\x7f\xd2\x8f\x48\xde\x4f\xba\x62\x8f\x4a\x5f\xa4\x61\x84\xb6\x27\x05\x47\x51\xd2\x71\xc6\xe2\x69\x09\x51\x25\xe3\x2c\x64\xfe\x9d\x8f\x18\xf1\x55\x49\x08\x9f\xff\x47\xf7\xd3\xa1\x2d\xd3\xd3\xbb\xbd\xe7\xc8\x6f\x9f\xe0\x40\x83\xf0\x61\xb8\x73\x8b\x0f\x3d\x1a\x1b\xf8\xe3\x5f\xd3\x69\x65\x70\x22\x0e\x5c\xac\xd0\xd5\x2e\xb4\xfe\xe8\xd0\x97\xf3\x9c\xb1\x66\x15\xd0\x01\xb1\x9f\x68\xf1\x55\x6d\x24\x99\xb5\x6c\x13\xc2\x07\xf1\x5e\x57\xbb\x0c\x02\x4f\x7a\x3a\x60\xdf\x9c\x81\x6a\xda\x81\x7d\xf2\xaa\x9a\x76\x50\xe5\x8c\x79\xce\x19\xdb\x4a\x82\x62\x1e\x63\xe7\xe1\x6c\x60\x88\x82\xdb\x0c\xf4\x7d\x90\x2c\x44\xb2\x5f\x91\xf4\x34\x14\x07\xd2\xd9\xd3\x56\xcc\xbb\x72\x28\xfe\x42\x3d\xae\xaf\xb8\x08\xd1\x93\x61\xd7\xc5\xa5\x1a\xd8\xdf\x51\xdd\x6f\x50\xd9\xc1\xe1\x08\x08\x63\x12\xbc\x8e\x7e\xc9\x74\xd9\xa4\x39\xbe\x6f\x68\xfd\x18\x7b\x6e\xd3\x5f\x44\x2f\x76\x16\x4d\x76\xd8\xd4\xab\xa9\xa5\xa6\xfb\x37\xc2\x69\x84\x7f\x7e\xe2\x01\x1f\x1e\x66\x09\x51\x2f\x80\xb3\x70\x75\x9e\xe7\xb8\x01\xf3\xe9\x47\x00\x00\x00\xff\xff\xe2\xc7\xfe\xed\xa9\x05\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1449, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
