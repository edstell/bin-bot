// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x41\x6e\xdb\x30\x10\x3c\x8b\xaf\xd8\xea\x90\x48\x81\x2a\xdd\x5d\xe4\x94\xf4\x60\x20\xb1\x0b\xd4\x7d\x00\x4d\xad\x65\x36\x12\x57\x59\x91\x71\x0c\x86\x7f\x2f\x28\xc9\x6e\x82\xf8\x90\x93\x88\xd1\xec\xec\xcc\x4e\x55\xc1\xfd\x1a\x56\xeb\x0d\xfc\xbc\x5f\x6e\x16\x70\xd7\x6a\x34\x16\x0e\x72\x00\xe9\x2c\x35\x68\x90\xa5\xc5\x1a\x76\x4c\x1d\x5c\x7b\x5f\xae\x64\x87\x21\x5c\x8b\x5e\xaa\x27\xd9\x20\x78\x5f\xfe\x9a\x9e\x21\x08\xa1\xbb\x9e\xd8\x42\x26\x92\x54\x91\xb1\xf8\x6a\x53\x21\x92\xb4\xd1\x76\xef\xb6\xa5\xa2\xae\xc2\x7a\xb0\xd8\xb6\x55\x2b\xbb\x6d\x2d\xab\x56\x6f\x59\xb2\xc6\xa1\xe2\x5e\xa5\x91\x4a\xd4\xb4\x58\x36\xd4\x4a\xd3\x94\xc4\x4d\xd5\x33\x59\xda\xba\x5d\x85\x46\x51\xad\xcd\x8c\xfc\x1d\xc8\xa4\x22\x17\xde\x7f\x07\x96\xa6\x41\x28\x7f\x23\xbf\x68\x35\x1a\xb1\xc7\x1e\x4f\x69\x06\xcb\x4e\x59\xf0\x22\x79\xc7\x7d\x44\xbb\xa7\x3a\x84\x08\x8e\xa1\xde\x2c\x3d\xd0\x01\x39\x04\x00\xe0\x5e\x95\x4b\xf3\x42\x4f\xc8\xd3\x14\x9a\xc8\x0d\x42\xec\x9c\x51\xb0\xc2\xc3\xa4\x9d\xe9\x91\xfa\x30\x86\x99\x07\x0a\x90\x6c\xe2\x52\x6d\x9a\x1c\x6e\x66\x13\x5e\x24\x8c\xd6\xb1\x81\xab\x09\xf1\x22\xb9\xec\xe7\xb3\xa1\xc5\xec\xe8\xb4\x73\xdc\x50\x40\x7a\xae\x23\xcd\x8b\x59\x6d\xf2\x99\x44\xab\x97\xc4\x27\xfb\x99\x3a\xd9\xca\xe1\xac\x91\x29\xfb\x0a\x73\x69\xe5\xdd\xf4\x2d\x80\xf1\x19\x6e\xbc\x2f\x97\xa6\x77\x76\x73\xec\xf1\x8d\xf7\x43\x08\x39\x64\x11\x5d\x3b\xfb\x01\x2e\x00\x99\x89\xf3\x98\xb6\x97\xc7\x96\x64\x3d\x42\xb0\xb8\x85\x73\x69\xe5\xa3\xe4\x61\x2f\xdb\x8c\xf1\x39\x17\x89\xde\x8d\x8c\x6f\xb7\x60\x74\x1b\x07\x4f\x77\x32\xba\x1d\x87\x63\x1a\x91\xf0\xd0\x9f\xa5\x54\xf9\xe9\x44\x73\x5b\x31\x44\x01\xf3\xea\xaf\x8b\x93\xb3\x51\xf7\xea\x42\x24\x1f\xce\x2a\x1f\x42\xfc\x31\xdd\x29\x46\x74\x46\xce\xe6\x3f\xbe\x16\x64\x02\xc9\xd9\x22\xfe\x99\x8b\x9a\x7a\xfb\xff\xfa\x17\x00\x00\xff\xff\xa6\x2b\x26\x30\x99\x03\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 921, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5f\x4f\xdb\x30\x10\x7f\xb6\x3f\xc5\xad\x0f\x90\xa0\xcc\x79\xef\xc4\xcb\xc6\xa4\x21\x0d\x98\x18\xdb\xbb\x93\x5c\x53\x6f\x89\x1d\xce\x0e\x50\x19\x7f\xf7\xc9\x71\xd2\x0e\x31\x24\x90\xf6\xd4\xeb\xf5\x77\xbf\x3f\xe7\x6b\x59\xc2\xd9\x15\x5c\x5e\xdd\xc0\xe7\xb3\xf3\x9b\x35\x5c\x9b\xd1\x21\xc1\xbd\xb4\x20\x47\x67\x5a\xd4\x48\xd2\x61\x03\x1b\x32\x3d\x1c\x7b\x2f\x2e\x65\x8f\x21\x1c\xf3\x41\xd6\xbf\x65\x8b\xe0\xbd\xf8\x96\xca\x10\x38\x57\xfd\x60\xc8\x41\xc6\xd9\xaa\x36\xda\xe1\x83\x5b\x71\xce\x56\xad\x72\xdb\xb1\x12\xb5\xe9\x4b\x6c\xac\xc3\xae\x2b\x3b\xd9\x57\x8d\x2c\x3b\x55\x91\x24\x85\xb6\xa4\xa1\x5e\xbd\x12\x7a\x27\x3b\xd5\x48\xa7\x8c\x9e\x26\x8c\x69\x3b\x14\xad\xe9\xa4\x6e\x85\xa1\xb6\x1c\xc8\x38\x53\x8d\x9b\x12\x75\x6d\x1a\xa5\xe7\xce\x2f\x1b\x07\x72\xee\x3d\x49\xdd\x22\x88\xef\x48\x77\xaa\x8e\xc6\xdd\x6e\x40\xf8\x22\x75\xd3\x21\x81\xd2\x0e\x69\x23\x6b\x04\xcf\x99\xf7\xef\x61\x86\x5f\xa0\xdb\x9a\x26\x84\xd8\x9c\xf7\x90\xcd\x29\xc5\xa7\xf4\x59\xc0\x89\xf7\xe2\x5c\x0f\xa3\xbb\xd9\x0d\xf8\x48\x5b\x1b\x42\x0e\x59\xec\x5e\x8d\xee\x49\xbb\x00\x24\x32\x94\x27\x0d\xd4\x91\x39\xf0\x64\x65\x7e\x07\xeb\x68\xac\x5d\xb4\x71\x42\x43\x2d\x52\x37\x82\x36\xa3\xae\xe1\x12\xef\x53\x27\xdb\xce\xce\xe7\x04\x39\x9c\xcc\x04\x9e\x33\x4a\xd5\xfa\x14\x22\xc5\x61\x26\x7f\x21\x5b\xc2\x27\xad\x6c\xb5\x4f\xba\x2a\x60\xae\x1f\x9d\xf9\x6a\xee\x91\x42\x58\x74\xc5\x1e\x95\x3f\x49\xc3\x08\xdd\x48\x1a\x8e\x92\xa4\xe7\x8c\xa5\x6a\x0d\x49\xa5\xe0\x2c\x66\xfe\x97\x8f\x14\xf1\x45\x49\x88\x3f\xff\x8f\xed\xe7\xd3\x5a\x96\xa7\xf7\x7b\xcf\x89\xdf\x3d\xc0\x33\x0d\xc2\xdb\x69\xe6\x1a\x6f\x47\xb4\x2e\xf2\xa7\xaf\x76\x30\xda\xe2\x42\x1c\xb9\x58\x65\x9a\x5d\x5c\xfd\xd1\x73\x5f\x3e\x70\xc6\xd4\x26\xa2\x23\x62\x7f\xa1\xe2\x87\xee\x25\xd9\xad\xec\x32\xc2\x5b\xf1\xd1\x34\xbb\x02\x22\x4f\xfe\x61\xc2\xbe\x3b\x05\xad\xba\x89\x7d\xf1\xaa\x55\x37\xa9\x72\xc6\x02\x7f\xc2\x7a\xf8\xa7\x88\x9f\xa9\xc4\xec\x6d\x5c\x64\x87\x62\x61\x9b\x77\x1f\xd7\x32\x5b\x3a\x88\xbd\x82\xaa\xda\x39\xb4\xc5\xf3\xc0\x17\x4b\x5c\x3b\xbc\x8d\x70\x39\xaf\xbf\xd7\x3f\xe1\xe3\xd2\xd6\x90\xf4\x22\xb8\x88\xa3\x87\x5b\x4b\xd7\x79\xa8\xfe\x04\x00\x00\xff\xff\xad\xf9\x9b\x27\x06\x05\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1286, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
